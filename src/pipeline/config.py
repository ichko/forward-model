import argparse

defaults = dict(
    # env_name='TwoPlayerPong-32-v0',
    # env_name='CubeCrash-v0',
    # env_name='snek-rgb-16-v1',
    # env_name='CartPole-v1',
    # env_name='LunarLander-v2',
    log_interval=1000,
    frame_size=(32, 32),
    its=50_000,
    device='cuda',
    moving_window_slices=None,
    recurrent_skip=8,
    rnn_num_layers=2,
    precondition_type='frame',
)

configs = dict(
    # Frame transformers
    frame_transformer_dense_cube=dict(
        env_name='CubeCrash-v0',
        lr=0.001,
        model='frame_transformer_dense',
        bs=256,
        precondition_size=1,
        max_seq_len=32,
        min_seq_len=2,
        moving_window_slices=2,
        action_embedding_size=32,
        hidden_size=64,
    ),
    frame_transformer_dense_pong=dict(
        env_name='TwoPlayerPong-32-v0',
        lr=0.001,
        model='frame_transformer_dense',
        bs=16,
        precondition_size=2,
        max_seq_len=128,
        min_seq_len=64,
        moving_window_slices=3,
        action_embedding_size=32,
        hidden_size=64,
    ),

    # RNN Based
    rnn_dense_cube=dict(
        env_name='CubeCrash-v0',
        lr=0.001,
        model='rnn_dense',
        bs=64,
        precondition_size=1,
        max_seq_len=32,
        min_seq_len=2,
        moving_window_slices=None,
        action_embedding_size=32,
        hidden_size=64,
    ),
    rnn_dense_pong=dict(
        env_name='TwoPlayerPong-32-v0',
        lr=0.001,
        model='rnn_dense',
        bs=32,
        precondition_size=2,
        max_seq_len=128,
        min_seq_len=64,
        moving_window_slices=None,
        action_embedding_size=32,
        hidden_size=64,
    ),
    rnn_deconvolve_cube=dict(
        env_name='CubeCrash-v0',
        lr=0.001,
        model='rnn_deconvolve',
        bs=64,
        precondition_size=1,
        max_seq_len=32,
        min_seq_len=2,
        moving_window_slices=None,
        action_embedding_size=32,
        hidden_size=32,
    ),
    rnn_deconvolve_pong=dict(
        env_name='TwoPlayerPong-32-v0',
        lr=0.001,
        model='rnn_deconvolve',
        bs=32,
        precondition_size=3,
        max_seq_len=128,
        min_seq_len=64,
        moving_window_slices=None,
        action_embedding_size=32,
        hidden_size=32,
    ),

    # Spatial Transformer
    rnn_spatial_transformer_cube=dict(
        env_name='CubeCrash-v0',
        lr=0.002,
        model='rnn_spatial_transformer',
        bs=16,
        precondition_size=1,
        max_seq_len=32,
        min_seq_len=2,
        moving_window_slices=None,
        action_embedding_size=16,
        hidden_size=32,
    ),
    rnn_spatial_transformer_pong=dict(
        env_name='TwoPlayerPong-32-v0',
        precondition_type='meta',
        lr=0.002,
        model='rnn_spatial_transformer',
        bs=16,
        precondition_size=1,
        max_seq_len=64,
        min_seq_len=16,
        moving_window_slices=None,
        action_embedding_size=16,
        hidden_size=32,
    ),
    rnn_spatial_asset_transformer_cube=dict(
        env_name='CubeCrash-v0',
        lr=0.0005,
        model='rnn_spatial_asset_transformer',
        bs=64,
        precondition_size=1,
        max_seq_len=32,
        min_seq_len=2,
        moving_window_slices=None,
        action_embedding_size=16,
        hidden_size=32,
    ),
    rnn_spatial_asset_transformer_pong=dict(
        env_name='TwoPlayerPong-32-v0',
        precondition_type='meta',
        lr=0.0005,
        model='rnn_spatial_asset_transformer',
        bs=64,
        precondition_size=1,
        max_seq_len=64,
        min_seq_len=16,
        moving_window_slices=None,
        action_embedding_size=16,
        hidden_size=32,
    ),
)


def get_hparams(config_id):
    config = configs[config_id]
    config_dict = {**defaults, **config}

    return argparse.Namespace(**config_dict)
